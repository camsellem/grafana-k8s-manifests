---
# Source: enterprise-logs/templates/tokengen/job-tokengen.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-enterprise-logs-tokengen
  labels:
    helm.sh/chart: enterprise-logs-2.4.2
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.5.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: tokengen
  annotations:
    "helm.sh/hook": post-install
spec:
  backoffLimit: 6
  completions: 1
  parallelism: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: enterprise-logs
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: tokengen
      annotations:
    spec:
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      initContainers:
        - name: tokengen
          image: docker.io/grafana/enterprise-logs:v1.5.2
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=tokengen
            - -admin.client.backend-type=s3
            - -admin.client.s3.endpoint=release-name-minio.default.svc:9000
            - -admin.client.s3.bucket-name=enterprise-logs-admin
            - -admin.client.s3.access-key-id=enterprise-logs
            - -admin.client.s3.secret-access-key=supersecret
            - -admin.client.s3.insecure=true
            - -tokengen.token-file=/shared/admin-token
          volumeMounts:
            - name: shared
              mountPath: /shared
            - name: config
              mountPath: /etc/loki/config
            - name: license
              mountPath: /etc/enterprise-logs/license
          env:
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
      containers:
        - name: create-secret
          image: bitnami/kubectl
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -euc
            - kubectl create secret generic gel-admin-token --from-file=token=/shared/admin-token --from-literal=grafana-token="$(base64 <(echo :$(cat /shared/admin-token)))"
          volumeMounts:
            - name: shared
              mountPath: /shared
            - name: config
              mountPath: /etc/loki/config
            - name: license
              mountPath: /etc/enterprise-logs/license
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
      restartPolicy: OnFailure
      serviceAccount: release-name-enterprise-logs
      serviceAccountName: release-name-enterprise-logs
      volumes:
        - name: config
          secret:
            secretName: enterprise-logs-config
        - name: license
          secret:
            secretName: enterprise-logs-license
        - name: shared
          emptyDir: {}
